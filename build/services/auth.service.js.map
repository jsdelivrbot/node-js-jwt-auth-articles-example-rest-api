{"version":3,"sources":["../../src/services/auth.service.js"],"names":["userInfo","unique_key","auth_info","err","user","status","getUniqueKeyFromBody","validator","isEmail","method","email","User","create","isMobilePhone","phone","createUser","password","findOne","select","message","comparePassword","authUser","body"],"mappings":"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","file":"auth.service.js","sourcesContent":["import User from './../models/User';\nimport validator from 'validator';\nimport { to, throwError } from './../services/util.service';\n\nexport function getUniqueKeyFromBody(body){// this is so they can send in 3 options unique_key, email, or phone and it will work\n    let unique_key = body.unique_key;\n    if(typeof unique_key==='undefined'){\n        if(typeof body.email != 'undefined'){\n            unique_key = body.email\n        }else if(typeof body.phone != 'undefined'){\n            unique_key = body.phone\n        }else{\n            unique_key = null;\n        }\n    }\n    return unique_key;\n}\n\nexport async function createUser(userInfo){\n    let unique_key, auth_info, err, user;\n    auth_info={}\n    auth_info.status='create';\n    unique_key = getUniqueKeyFromBody(userInfo);\n    if(!unique_key) throwError('An email or phone number was not entered.');\n    if(validator.isEmail(unique_key)){\n        auth_info.method = 'email';\n        userInfo.email = unique_key;\n        [err, user] = await to(User.create(userInfo));\n        if(err) throwError('user already exists with that email');\n        return user;\n    }else if(validator.isMobilePhone(unique_key, 'any')){\n        auth_info.method = 'phone';\n        userInfo.phone = unique_key;\n        [err, user] = await to(User.create(userInfo));\n        if(err) throwError('user already exists with that phone number');\n        return user;\n    }else{\n        throwError('A valid email or phone number was not entered.');\n    }\n}\n\n\nexport async function authUser(userInfo){//returns token\n    let unique_key;\n    let auth_info = {};\n    let user, err;\n\n    auth_info.status = 'login';\n    unique_key = getUniqueKeyFromBody(userInfo);\n    if(!unique_key) throwError('Please enter an email or phone number to login');\n\n    if(!userInfo.password) throwError('Please enter a password to login');\n    if(validator.isEmail(unique_key)){\n        auth_info.method='email';\n        // Note .select('+password') , see User model. Password is excluded by default!\n        [err, user] = await to(User.findOne({email:unique_key }).select('+password'));\n        if(err) throwError(err.message);\n    }else if(validator.isMobilePhone(unique_key, 'any')){\n        auth_info.method='phone';\n        [err, user] = await to(User.findOne({phone:unique_key }));\n        if(err) throwError(err.message);\n    }else{\n        throwError('A valid email or phone number was not entered');\n    }\n    if(!user) throwError('Not registered');\n    [err, user] = await to(user.comparePassword(userInfo.password));\n    if(err) throwError(err.message);\n    return user;\n}"]}